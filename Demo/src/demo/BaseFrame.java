/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package demo;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Admin
 */
public class BaseFrame extends javax.swing.JFrame {

    /**
     * Creates new form BaseFrame
     */
    public BaseFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // định dạng và tạo ra tất cả các đối tượng (nút bấm, hình ảnh, frame, ...) trên giao diện
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JPanel();
        optionButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        menuLabel = new javax.swing.JLabel();
        backgroundMenu = new javax.swing.JLabel();
        optionPanel = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        beforeButton = new javax.swing.JButton();
        phaseButton = new javax.swing.JButton();
        afterButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        easyButton = new javax.swing.JButton();
        hardButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        playPanel = new javax.swing.JPanel();
        puzzlePanel = new javax.swing.JPanel();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        homeButton2 = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();
        solveButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        menuPanel.setBackground(new java.awt.Color(255, 255, 0));
        menuPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        menuPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        menuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        optionButton.setBackground(new java.awt.Color(227, 30, 150));
        optionButton.setForeground(new java.awt.Color(255, 255, 255));
        optionButton.setText("OPTION");
        optionButton.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 204, 204)));
        optionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionButtonActionPerformed(evt);
            }
        });
        menuPanel.add(optionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 95, 47));

        playButton.setBackground(new java.awt.Color(102, 102, 255));
        playButton.setForeground(new java.awt.Color(255, 255, 255));
        playButton.setText("PLAY");
        playButton.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 255, 204)));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        menuPanel.add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 95, 43));

        menuLabel.setBackground(new java.awt.Color(255, 255, 255));
        menuLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/title.png"))); // NOI18N
        menuLabel.setText("TRÒ CHƠI 8 Ô VUÔNG");
        menuPanel.add(menuLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 260, 80));

        backgroundMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background.jpg"))); // NOI18N
        backgroundMenu.setText("jLabel3");
        backgroundMenu.setPreferredSize(new java.awt.Dimension(400, 400));
        menuPanel.add(backgroundMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 400));

        getContentPane().add(menuPanel, "card2");

        optionPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        optionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeButton.setBackground(new java.awt.Color(0, 255, 204));
        homeButton.setText("HOME");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        optionPanel.add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 90, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/options.png"))); // NOI18N
        optionPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, -1));

        beforeButton.setBackground(new java.awt.Color(97, 130, 183));
        beforeButton.setText("<<<");
        beforeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beforeButtonActionPerformed(evt);
            }
        });
        optionPanel.add(beforeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 60, 80));

        phaseButton.setBackground(new java.awt.Color(255, 0, 51));
        phaseButton.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        phaseButton.setText("1");
        phaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phaseButtonActionPerformed(evt);
            }
        });
        optionPanel.add(phaseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 80, 80));

        afterButton.setBackground(new java.awt.Color(255, 111, 227));
        afterButton.setText(">>>");
        afterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afterButtonActionPerformed(evt);
            }
        });
        optionPanel.add(afterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 60, 80));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/level.png"))); // NOI18N
        optionPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 251, 274, 27));

        easyButton.setBackground(new java.awt.Color(51, 255, 0));
        easyButton.setText("DỄ");
        easyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyButtonActionPerformed(evt);
            }
        });
        optionPanel.add(easyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 296, -1, 60));

        hardButton.setBackground(new java.awt.Color(255, 0, 0));
        hardButton.setText("KHÓ");
        hardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardButtonActionPerformed(evt);
            }
        });
        optionPanel.add(hardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(218, 296, -1, 60));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        optionPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 400));

        getContentPane().add(optionPanel, "card3");

        playPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        playPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        puzzlePanel.setBackground(new java.awt.Color(255, 204, 255));
        puzzlePanel.setLayout(new java.awt.GridLayout(3, 3));

        button1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button1.setText("1");
        button1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button1.setPreferredSize(new java.awt.Dimension(70, 70));
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button1);

        button2.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button2.setText("2");
        button2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button2);

        button3.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button3.setText("3");
        button3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button3);

        button4.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button4.setText("4");
        button4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button4);

        button5.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button5.setText("5");
        button5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button5);

        button6.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button6.setText("6");
        button6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button6);

        button7.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button7.setText("7");
        button7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button7);

        button8.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button8.setText("8");
        button8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button8);

        button9.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });
        puzzlePanel.add(button9);

        playPanel.add(puzzlePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 211, -1));

        homeButton2.setBackground(new java.awt.Color(0, 255, 204));
        homeButton2.setText("HOME");
        homeButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButton2ActionPerformed(evt);
            }
        });
        playPanel.add(homeButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 80, 31));

        timeLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setText("THỜI GIAN: ");
        playPanel.add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 190, 30));

        solveButton.setText("GIẢI");
        solveButton.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 255, 255)));
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });
        playPanel.add(solveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, 113, 37));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        playPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 0, 400, 400));

        getContentPane().add(playPanel, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // ấn lựa chọn màu sắc màn chơi
    private void optionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) this.getContentPane().getLayout();
        cardLayout.next(this.getContentPane());
        this.phase = 0;
        phaseButton.setBackground(listColor.get(phase));
    }//GEN-LAST:event_optionButtonActionPerformed

    private void afterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afterButtonActionPerformed
        // TODO add your handling code here:
        if (phase < 2) {
            phase++;
            phaseButton.setBackground(listColor.get(phase));
        }
    }//GEN-LAST:event_afterButtonActionPerformed

    private void beforeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beforeButtonActionPerformed
        // TODO add your handling code here:
        if (phase > 0) {
            phase--;
            phaseButton.setBackground(listColor.get(phase));
        }
    }//GEN-LAST:event_beforeButtonActionPerformed

    // nút bấm lựa chọn chế độ dễ
    private void easyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyButtonActionPerformed
        // TODO add your handling code here:
        this.level = "EASY";
    }//GEN-LAST:event_easyButtonActionPerformed

    // sau khi ấn nút play thì sẽ hiện ra màn chơi
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) this.getContentPane().getLayout();
        cardLayout.next(this.getContentPane());
        cardLayout.next(this.getContentPane());
        solveButton.setBackground(new java.awt.Color(255, 23, 30));
        solveButton.setEnabled(true);
        start = System.currentTimeMillis();
        button1.setBackground(listColor.get(phase));
        button2.setBackground(listColor.get(phase));
        button3.setBackground(listColor.get(phase));
        button4.setBackground(listColor.get(phase));
        button5.setBackground(listColor.get(phase));
        button6.setBackground(listColor.get(phase));
        button7.setBackground(listColor.get(phase));
        button8.setBackground(listColor.get(phase));
        button9.setBackground(listColor.get(phase));
        listButton = Arrays.asList(
                Arrays.asList(button1, button2, button3),
                Arrays.asList(button4, button5, button6),
                Arrays.asList(button7, button8, button9));
        puzzle.shuffle();
        setBlock();
        isSuccess = false;
        success();
        new Thread() {
            public void run() {
                while (!isSuccess) {
                    time = System.currentTimeMillis() - start;
                    if (level.equals("EASY")) {
                        String text = new SimpleDateFormat("mm:ss").format(new Date(time));
                        timeLabel.setText("THỜI GIAN: " + text);
                        timeDone = text;
                    } else {
                        long time2 = end - time;
                        String text = new SimpleDateFormat("mm:ss").format(new Date(time));
                        String text2 = new SimpleDateFormat("mm:ss").format(new Date(time2));
                        timeLabel.setText("THỜI GIAN: " + text2);
                        timeDone = text;
                        if (time2 == 0L) {
                            faile();
                        }
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_playButtonActionPerformed

    // nút bấm quay về trang chủ ban đầu
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) this.getContentPane().getLayout();
        cardLayout.previous(this.getContentPane());
    }//GEN-LAST:event_homeButtonActionPerformed

    // nút bấm quay về trang chủ ban đầu
    private void homeButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButton2ActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) this.getContentPane().getLayout();
        cardLayout.previous(this.getContentPane());
        cardLayout.previous(this.getContentPane());
    }//GEN-LAST:event_homeButton2ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        moveBlock(button1);
    }//GEN-LAST:event_button1ActionPerformed

    // nút bấm chọn chế độ khó
    private void hardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardButtonActionPerformed
        // TODO add your handling code here:
        this.level = "HARD";
    }//GEN-LAST:event_hardButtonActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
        moveBlock(button2);
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        // TODO add your handling code here:
        moveBlock(button3);
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        // TODO add your handling code here:
        moveBlock(button4);
    }//GEN-LAST:event_button4ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        // TODO add your handling code here:
        moveBlock(button5);
    }//GEN-LAST:event_button5ActionPerformed

    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        // TODO add your handling code here:
        moveBlock(button6);
    }//GEN-LAST:event_button6ActionPerformed

    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        // TODO add your handling code here:
        moveBlock(button7);
    }//GEN-LAST:event_button7ActionPerformed

    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        // TODO add your handling code here:
        moveBlock(button8);
    }//GEN-LAST:event_button8ActionPerformed

    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        // TODO add your handling code here:
        moveBlock(button9);
    }//GEN-LAST:event_button9ActionPerformed

    // sau khi bấm nút giải thì sẽ thực hiện thuật toán A*
    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        // TODO add your handling code here:
        solveButton.setBackground(Color.gray);
        puzzle.run();
        isSuccess = true;
        solveButton.setEnabled(false);
        puzzle.setCurrent();
        JOptionPane.showMessageDialog(this, "Thời gian: " + timeDone, "THÀNH CÔNG", JOptionPane.INFORMATION_MESSAGE);
        new Thread(new Runnable() {
            @Override
            public void run() {
                // The while is just to ignore interruption.
                for (int i = 0; i < puzzle.way.length(); ++i) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(BaseFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (puzzle.way.charAt(i) == 'u') {
                        puzzle.moveUp();
                        setBlock();
                    }
                    if (puzzle.way.charAt(i) == 'd') {
                        puzzle.moveDown();
                        setBlock();
                    }
                    if (puzzle.way.charAt(i) == 'l') {
                        puzzle.moveLeft();
                        setBlock();
                    }
                    if (puzzle.way.charAt(i) == 'r') {
                        puzzle.moveRight();
                        setBlock();
                    }
                }
            }
        }).start();
//        success();
    }//GEN-LAST:event_solveButtonActionPerformed

    private void phaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phaseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phaseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseFrame().setVisible(true);
            }
        });
    }

    // các biến đối tượng xuất hiện trên giao diện (nút bấm, chữ, ...)
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afterButton;
    private javax.swing.JLabel backgroundMenu;
    private javax.swing.JButton beforeButton;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton easyButton;
    private javax.swing.JButton hardButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton homeButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton optionButton;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JButton phaseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JPanel playPanel;
    private javax.swing.JPanel puzzlePanel;
    private javax.swing.JButton solveButton;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables

    private List<Color> listColor = Arrays.asList(Color.RED, Color.GREEN, Color.YELLOW, Color.GRAY);
    private int phase = 0;
    private static long start;
    private static long time;
    private static long end = 30 * 1000;
    private static String level = "EASY";
    private List<List<javax.swing.JButton>> listButton = Arrays.asList(
            Arrays.asList(button1, button2, button3),
            Arrays.asList(button4, button5, button6),
            Arrays.asList(button7, button8, button9));
    private Puzzle puzzle = new Puzzle();
    private String timeDone = "";
    private boolean isSuccess = false;

    // di chuyển ô vuông
    private void moveBlock(javax.swing.JButton button) {
        int x = -1;
        int y = -1;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (listButton.get(i).get(j).getText().equals(button.getText())) {
                    y = i;
                    x = j;
                    break;
                }
            }
            if (x != -1 && y != -1) {
                break;
            }
        }
        int u = y - 1;
        int d = y + 1;
        int l = x - 1;
        int r = x + 1;
        boolean check = false;
        if (u >= 0 && !check) {
            if (listButton.get(u).get(x).getText().equals("")) {
                listButton.get(u).get(x).setText(button.getText());
                button.setText("");
                listButton.get(u).get(x).setBackground(button.getBackground());
                button.setBackground(listColor.get(listColor.size() - 1));
                check = true;
            }
        }
        if (d < 3 && !check) {
            if (listButton.get(d).get(x).getText().equals("")) {
                listButton.get(d).get(x).setText(button.getText());
                button.setText("");
                listButton.get(d).get(x).setBackground(button.getBackground());
                button.setBackground(listColor.get(listColor.size() - 1));
                check = true;
            }
        }
        if (l >= 0 && !check) {
            if (listButton.get(y).get(l).getText().equals("")) {
                listButton.get(y).get(l).setText(button.getText());
                button.setText("");
                listButton.get(y).get(l).setBackground(button.getBackground());
                button.setBackground(listColor.get(listColor.size() - 1));
                check = true;
            }
        }
        if (r < 3 && !check) {
            if (listButton.get(y).get(r).getText().equals("")) {
                listButton.get(y).get(r).setText(button.getText());
                button.setText("");
                listButton.get(y).get(r).setBackground(button.getBackground());
                button.setBackground(listColor.get(listColor.size() - 1));
                check = true;
            }
        }
        puzzle.currentList = new ArrayList<>();
        listButton.stream()
                .forEach(list -> {
                    list.forEach(a -> {
                        puzzle.currentList.add(a.getText());
                    });
                });
        System.out.println(puzzle.currentList);
        System.out.println(puzzle.resultList);
        success();
    }

    // kiểm tra giải thành công
    public void success() {
        State state = new State(puzzle.currentList, 0, "");
        if (state.check()) {
            isSuccess = true;
            solveButton.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Thời gian: " + timeDone, "THÀNH CÔNG", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // kiểm tra hết thời gian
    public void faile() {
        isSuccess = true;
        JOptionPane.showMessageDialog(this, "Thời gian: " + timeDone, "THẤT BẠI", JOptionPane.HEIGHT);
    }

    // set màu sắc và thứ tự cho các khối block
    public void setBlock() {
        button1.setBackground(listColor.get(phase));
        button2.setBackground(listColor.get(phase));
        button3.setBackground(listColor.get(phase));
        button4.setBackground(listColor.get(phase));
        button5.setBackground(listColor.get(phase));
        button6.setBackground(listColor.get(phase));
        button7.setBackground(listColor.get(phase));
        button8.setBackground(listColor.get(phase));
        button9.setBackground(listColor.get(phase));
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                listButton.get(i).get(j).setText(puzzle.current.get(i).get(j));
                if (listButton.get(i).get(j).getText().equals("")) {
                    listButton.get(i).get(j).setBackground(listColor.get(listColor.size() - 1));
                }
            }
        }
    }
}
